class X2Ability_ArcThrower extends X2Ability config(RPO_WOTC);

var config int ARCTHROWER_COOLDOWN;
var config int ARCTHROWER_CHARGES;

var config int LIGHT_ELERIUM_HEALTH_BONUS;
var config int LIGHT_ELERIUM_MOBILITY_BONUS;
var config int LIGHT_ELERIUM_DODGE_BONUS;
var config int LIGHT_ELERIUM_DEFENSE_BONUS;

var config int MEDIUM_ELERIUM_HEALTH_BONUS;
var config int MEDIUM_ELERIUM_MITIGATION_CHANCE;
var config int MEDIUM_ELERIUM_MITIGATION_AMOUNT;
var config int MEDIUM_ELERIUM_PSIOFFENSE_BONUS;

var config int HEAVY_ELERIUM_HEALTH_BONUS;
var config int HEAVY_ELERIUM_MITIGATION_CHANCE;
var config int HEAVY_ELERIUM_MITIGATION_AMOUNT;

var config int PILLAR_ARMOR_COOLDOWN;

static function array<X2DataTemplate> CreateTemplates()
{
	local array<X2DataTemplate> Templates;

	Templates.AddItem(ArcThrowerAbility());
	Templates.AddItem(LightEleriumArmorStats());
	Templates.AddItem(MediumEleriumArmorStats());
	Templates.AddItem(HeavyEleriumArmorStats());
	Templates.AddItem(PillarArmorAbility());

	return Templates;
}

static function X2AbilityTemplate ArcThrowerAbility()
{
	local X2AbilityTemplate             Template;
	local X2AbilityCost_ActionPoints    ActionPointCost;
	local X2AbilityCharges				Charges;
	local X2AbilityCooldown				Cooldown;
	local X2Condition_UnitType			UnitTypeCondition;
	local X2Condition_UnitProperty		UnitPropertyCondition;
	local X2Effect_Persistent			UnconsciousEffect;
	local array<name>					SkipExclusions;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'ArcThrowerAbility');

	Template.ShotHUDPriority = class'UIUtilities_Tactical'.const.STASIS_LANCE_PRIORITY;

	ActionPointCost = new class'X2AbilityCost_ActionPoints';
	ActionPointCost.iNumPoints = 1;
	ActionPointCost.bConsumeAllPoints = false; // Change to true on ship
	ActionPointCost.bFreeCost = true; // for testing purposes
	Template.AbilityCosts.AddItem(ActionPointCost);

	if (default.ARCTHROWER_COOLDOWN > 0)
	{
		Cooldown = new class'X2AbilityCooldown';
		Cooldown.iNumTurns = default.ARCTHROWER_COOLDOWN;
		Template.AbilityCooldown = Cooldown;
	}

	if (default.ARCTHROWER_CHARGES > 0)
	{
		Charges = new class'X2AbilityCharges';
		Charges.InitialCharges = default.ARCTHROWER_CHARGES;
		Template.AbilityCharges = Charges;
		Template.AbilityCosts.AddItem(new class'X2AbilityCost_Charges');
	}

	Template.AbilityToHitCalc = new class'X2AbilityToHitCalc_ArcThrower';

	Template.AbilityShooterConditions.AddItem(default.LivingShooterProperty);
	Template.AbilityTargetConditions.AddItem(default.MeleeVisibilityCondition);

	UnitTypeCondition = new class'X2Condition_UnitType';
	UnitTypeCondition.ExcludeTypes.AddItem('ChosenAssassin');
	UnitTypeCondition.ExcludeTypes.AddItem('ChosenWarlock');
	UnitTypeCondition.ExcludeTypes.AddItem('ChosenSniper');
	UnitTypeCondition.ExcludeTypes.AddItem('BerserkerQueen');
	UnitTypeCondition.ExcludeTypes.AddItem('ArchonKing');
	UnitTypeCondition.ExcludeTypes.AddItem('ViperKing');
	Template.AbilityTargetConditions.AddItem(UnitTypeCondition);

	UnitPropertyCondition = default.LivingHostileTargetProperty;
	UnitPropertyCondition.TreatMindControlledSquadmateAsHostile = false;
	UnitPropertyCondition.ExcludeCivilian = true;
	Template.AbilityTargetConditions.AddItem(UnitPropertyCondition);

	Template.AbilityTargetConditions.AddItem(default.MeleeVisibilityCondition);

	SkipExclusions.AddItem(class'X2StatusEffects'.default.BurningName);
	Template.AddShooterEffectExclusions(SkipExclusions);

	Template.AbilityTargetStyle = new class'X2AbilityTarget_MovingMelee';
	Template.TargetingMethod = class'X2TargetingMethod_MeleePath';

	Template.AbilityTriggers.AddItem(default.PlayerInputTrigger);
	Template.AbilityTriggers.AddItem(new class'X2AbilityTrigger_EndOfMove');

	//  Unconscious Stun Effect
	UnconsciousEffect = class'X2StatusEffects'.static.CreateUnconsciousStatusEffect(false, true);
	Template.AddTargetEffect(UnconsciousEffect);

	Template.Hostility = eHostility_Offensive;
	Template.IconImage = "img:///UILibrary_PerkIcons.UIPerk_mindblast";
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_AlwaysShow;
	Template.AbilitySourceName = 'eAbilitySource_Item';
	Template.bShowActivation = true;
	Template.SourceHitSpeech = 'StunnedAlien';
	Template.SourceMissSpeech = 'AlienNotStunned';
	Template.MeleePuckMeshPath = "UI_3D.CursorSet.S_MovePuck_SkullJack";

	Template.Requirements.RequiredTechs.AddItem('ArcThrowing');

	Template.CinescriptCameraType = "Soldier_Skulljack_Stage1";

	Template.BuildNewGameStateFn = TypicalMoveEndAbility_BuildGameState;
	Template.BuildInterruptGameStateFn = TypicalMoveEndAbility_BuildInterruptGameState;
	//Template.BuildVisualizationFn = ArcThrower_BuildVisualization; // Moved animations directly into archetype
	Template.BuildVisualizationFn = TypicalAbility_BuildVisualization;
	
//BEGIN AUTOGENERATED CODE: Template Overrides 'SKULLMINEAbility'
	Template.bFrameEvenWhenUnitIsHidden = true;
//END AUTOGENERATED CODE: Template Overrides 'SKULLMINEAbility'

	return Template;
}

simulated function ArcThrower_BuildVisualization(XComGameState VisualizeGameState)
{
	local XComGameStateHistory History;
	local XComGameStateContext_Ability  Context;
	local StateObjectReference          InteractingUnitRef, TargetUnitRef;

	local VisualizationActionMetadata        EmptyTrack;
	local VisualizationActionMetadata        ActionMetadata;
	local X2Action_PlaySoundAndFlyOver		SoundAndFlyOver;
	local X2Action_PlaySyncedMeleeAnimation SynceMeleeAction;
	local XComGameState_Ability AbilityState;
	local X2AbilityTemplate     AbilityTemplate;
	local X2VisualizerInterface TargetVisualizerInterface;
	local int i;
	local XComGameStateVisualizationMgr VisMgr;
	local X2Action_MarkerNamed JoinActions;
	local array<X2Action>					LeafNodes;
	local X2Action_Delay DelayAction;
	local X2Action_ApplyWeaponDamageToUnit WeaponDamageAction;

	History = `XCOMHISTORY;
	VisMgr = `XCOMVISUALIZATIONMGR;

	Context = XComGameStateContext_Ability(VisualizeGameState.GetContext());
	InteractingUnitRef = Context.InputContext.SourceObject;
	TargetUnitRef = Context.InputContext.PrimaryTarget;
	AbilityState = XComGameState_Ability(History.GetGameStateForObjectID(Context.InputContext.AbilityRef.ObjectID));
	AbilityTemplate = AbilityState.GetMyTemplate();

	// first build any movement visualization
	if(Context.InputContext.MovementPaths.Length > 0)
	{
		class'X2Ability_DefaultAbilitySet'.static.MoveAbility_BuildVisualization(VisualizeGameState);
	}

	ActionMetadata = EmptyTrack;
	ActionMetadata.StateObject_OldState = History.GetGameStateForObjectID(InteractingUnitRef.ObjectID, eReturnType_Reference, VisualizeGameState.HistoryIndex - 1);
	ActionMetadata.StateObject_NewState = VisualizeGameState.GetGameStateForObjectID(InteractingUnitRef.ObjectID);
	ActionMetadata.VisualizeActor = History.GetVisualizer(InteractingUnitRef.ObjectID);
	ActionMetadata.LastActionAdded = VisMgr.GetNodeOfType(VisMgr.BuildVisTree, class'X2Action_MoveEnd', ActionMetadata.VisualizeActor);

	if( Context.IsResultContextHit() )
	{
		if( AbilityTemplate.SourceHitSpeech != '' )
		{
			SoundAndFlyOver = X2Action_PlaySoundAndFlyOver(class'X2Action_PlaySoundAndFlyover'.static.AddToVisualizationTree(ActionMetadata, Context, false, ActionMetadata.LastActionAdded));
			SoundAndFlyOver.SetSoundAndFlyOverParameters(None, "", AbilityTemplate.SourceHitSpeech, eColor_Bad);
		}

		SynceMeleeAction = X2Action_PlaySyncedMeleeAnimation(class'X2Action_PlaySyncedMeleeAnimation'.static.AddToVisualizationTree(ActionMetadata, Context, false, ActionMetadata.LastActionAdded));
		SynceMeleeAction.SourceAnim = 'FF_MeleeA';
		SynceMeleeAction.TargetAnim = 'FF_SkulljackedMissA';
	}
	else
	{
		if( AbilityTemplate.SourceMissSpeech != '' )
		{
			SoundAndFlyOver = X2Action_PlaySoundAndFlyOver(class'X2Action_PlaySoundAndFlyover'.static.AddToVisualizationTree(ActionMetadata, Context, false, ActionMetadata.LastActionAdded));
			SoundAndFlyOver.SetSoundAndFlyOverParameters(None, "", AbilityTemplate.SourceMissSpeech, eColor_Bad);
		}

		SynceMeleeAction = X2Action_PlaySyncedMeleeAnimation(class'X2Action_PlaySyncedMeleeAnimation'.static.AddToVisualizationTree(ActionMetadata, Context, false, ActionMetadata.LastActionAdded));
		SynceMeleeAction.SourceAnim = 'FF_SkulljackerMissA';
		SynceMeleeAction.TargetAnim = 'FF_SkulljackedMissA';
	}

	//Configure the visualization track for the target
	//****************************************************************************************
	ActionMetadata = EmptyTrack;
	ActionMetadata.StateObject_OldState = History.GetGameStateForObjectID(TargetUnitRef.ObjectID, eReturnType_Reference, VisualizeGameState.HistoryIndex - 1);
	ActionMetadata.StateObject_NewState = VisualizeGameState.GetGameStateForObjectID(TargetUnitRef.ObjectID);
	ActionMetadata.VisualizeActor = History.GetVisualizer(TargetUnitRef.ObjectID);

	//  This is sort of a super hack, that allows DLC/mods to visualize extra stuff in here.
	//  Visualize effects from index 1 as index 0 should be the base game damage effect.
	for (i = 1; i < AbilityTemplate.AbilityTargetEffects.Length; ++i)
	{
		AbilityTemplate.AbilityTargetEffects[i].AddX2ActionsForVisualization(VisualizeGameState, ActionMetadata, Context.FindTargetEffectApplyResult(AbilityTemplate.AbilityTargetEffects[i]));
	}

	if( Context.IsResultContextMiss() )
	{
		class'X2Action_WaitForAbilityEffect'.static.AddToVisualizationTree(ActionMetadata, Context, false, ActionMetadata.LastActionAdded);

		if( AbilityTemplate.LocMissMessage != "" || AbilityTemplate.TargetMissSpeech != '' )
		{
			SoundAndFlyOver = X2Action_PlaySoundAndFlyOver(class'X2Action_PlaySoundAndFlyover'.static.AddToVisualizationTree(ActionMetadata, Context, false, ActionMetadata.LastActionAdded));
			SoundAndFlyOver.SetSoundAndFlyOverParameters(None, AbilityTemplate.LocMissMessage, AbilityTemplate.TargetMissSpeech, eColor_Bad);
		}
	}
	else if( Context.IsResultContextHit() && (AbilityTemplate.LocHitMessage != "" || AbilityTemplate.TargetHitSpeech != '') )
	{
		SoundAndFlyOver = X2Action_PlaySoundAndFlyOver(class'X2Action_PlaySoundAndFlyover'.static.AddToVisualizationTree(ActionMetadata, Context, false, ActionMetadata.LastActionAdded));
		SoundAndFlyOver.SetSoundAndFlyOverParameters(None, AbilityTemplate.LocHitMessage, AbilityTemplate.TargetHitSpeech, eColor_Good);

		//Show the miss damage here, including a "MISSED" flyover (LocMissMessage should never just contain "Miss" or something similar)
		WeaponDamageAction = X2Action_ApplyWeaponDamageToUnit(class'X2Action_ApplyWeaponDamageToUnit'.static.AddToVisualizationTree(ActionMetadata, Context));//auto-parent to fire action
		WeaponDamageAction.OriginatingEffect = AbilityTemplate.AbilityTargetEffects[0];
		WeaponDamageAction.bPlayDamageAnim = false; //The synced melee action will play the animation for us

		//Visualize the target's death normally if they were killed by the miss damage
		TargetVisualizerInterface = X2VisualizerInterface(ActionMetadata.VisualizeActor);
		if (TargetVisualizerInterface != none)
		{
			TargetVisualizerInterface.BuildAbilityEffectsVisualization(VisualizeGameState, ActionMetadata);
		}
	}

	DelayAction = X2Action_Delay(class'X2Action_Delay'.static.AddToVisualizationTree(ActionMetadata, Context, false, ActionMetadata.LastActionAdded));
	DelayAction.Duration = 1.0; // short pause to see the flyover

	VisMgr.GetAllLeafNodes(VisMgr.BuildVisTree, LeafNodes);

	if( VisMgr.BuildVisTree.ChildActions.Length > 0 )
	{
		JoinActions = X2Action_MarkerNamed(class'X2Action_MarkerNamed'.static.AddToVisualizationTree(ActionMetadata, Context, false, none, LeafNodes));
		JoinActions.SetName("Join");
	}
}

static function X2AbilityTemplate LightEleriumArmorStats()
{
	local X2AbilityTemplate                 Template;	
	local X2AbilityTrigger					Trigger;
	local X2AbilityTarget_Self				TargetStyle;
	local X2Effect_PersistentStatChange		PersistentStatChangeEffect;
	//local X2Effect_LowProfile               LowProfileEffect;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'LightEleriumArmorStats');
	// Template.IconImage  -- no icon needed for armor stats

	Template.AbilitySourceName = 'eAbilitySource_Item';
	Template.eAbilityIconBehaviorHUD = EAbilityIconBehavior_NeverShow;
	Template.Hostility = eHostility_Neutral;
	Template.bDisplayInUITacticalText = false;
	
	Template.AbilityToHitCalc = default.DeadEye;
	
	TargetStyle = new class'X2AbilityTarget_Self';
	Template.AbilityTargetStyle = TargetStyle;

	Trigger = new class'X2AbilityTrigger_UnitPostBeginPlay';
	Template.AbilityTriggers.AddItem(Trigger);
	
	PersistentStatChangeEffect = new class'X2Effect_PersistentStatChange';
	PersistentStatChangeEffect.BuildPersistentEffect(1, true, false, false);
	PersistentStatChangeEffect.AddPersistentStatChange(eStat_HP, default.LIGHT_ELERIUM_HEALTH_BONUS);
	PersistentStatChangeEffect.AddPersistentStatChange(eStat_Mobility, default.LIGHT_ELERIUM_MOBILITY_BONUS);
	PersistentStatChangeEffect.AddPersistentStatChange(eStat_Dodge, default.LIGHT_ELERIUM_DODGE_BONUS);
	PersistentStatChangeEffect.AddPersistentStatChange(eStat_Defense, default.LIGHT_ELERIUM_DEFENSE_BONUS);
	Template.AddTargetEffect(PersistentStatChangeEffect);

	// disabled - ttp# 6818
	//LowProfileEffect = new class'X2Effect_LowProfile';
	//LowProfileEffect.BuildPersistentEffect(1, true, false, false);
	//Template.AddTargetEffect(LowProfileEffect);

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;

	return Template;	
}

static function X2AbilityTemplate MediumEleriumArmorStats()
{
	local X2AbilityTemplate                 Template;
	local X2AbilityTrigger					Trigger;
	local X2AbilityTarget_Self				TargetStyle;
	local X2Effect_PersistentStatChange		PersistentStatChangeEffect;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'MediumEleriumArmorStats');
	// Template.IconImage  -- no icon needed for armor stats

	Template.AbilitySourceName = 'eAbilitySource_Item';
	Template.eAbilityIconBehaviorHUD = EAbilityIconBehavior_NeverShow;
	Template.Hostility = eHostility_Neutral;
	Template.bDisplayInUITacticalText = false;

	Template.AbilityToHitCalc = default.DeadEye;

	TargetStyle = new class'X2AbilityTarget_Self';
	Template.AbilityTargetStyle = TargetStyle;

	Trigger = new class'X2AbilityTrigger_UnitPostBeginPlay';
	Template.AbilityTriggers.AddItem(Trigger);

	//
	PersistentStatChangeEffect = new class'X2Effect_PersistentStatChange';
	PersistentStatChangeEffect.BuildPersistentEffect(1, true, false, false);
	// PersistentStatChangeEffect.SetDisplayInfo(ePerkBuff_Passive, default.MediumPlatedHealthBonusName, default.MediumPlatedHealthBonusDesc, Template.IconImage);
	PersistentStatChangeEffect.AddPersistentStatChange(eStat_HP, default.MEDIUM_ELERIUM_HEALTH_BONUS);
	PersistentStatChangeEffect.AddPersistentStatChange(eStat_ArmorChance, default.MEDIUM_ELERIUM_MITIGATION_CHANCE);
	PersistentStatChangeEffect.AddPersistentStatChange(eStat_ArmorMitigation, default.MEDIUM_ELERIUM_MITIGATION_AMOUNT);
	PersistentStatChangeEffect.AddPersistentStatChange(eStat_PsiOffense, default.MEDIUM_ELERIUM_PSIOFFENSE_BONUS);
	Template.AddTargetEffect(PersistentStatChangeEffect);

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;

	return Template;
}

static function X2AbilityTemplate HeavyEleriumArmorStats()
{
	local X2AbilityTemplate                 Template;
	local X2AbilityTrigger					Trigger;
	local X2AbilityTarget_Self				TargetStyle;
	local X2Effect_PersistentStatChange		PersistentStatChangeEffect;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'HeavyEleriumArmorStats');
	// Template.IconImage  -- no icon needed for armor stats

	Template.AbilitySourceName = 'eAbilitySource_Item';
	Template.eAbilityIconBehaviorHUD = EAbilityIconBehavior_NeverShow;
	Template.Hostility = eHostility_Neutral;
	Template.bDisplayInUITacticalText = false;

	Template.AbilityToHitCalc = default.DeadEye;

	TargetStyle = new class'X2AbilityTarget_Self';
	Template.AbilityTargetStyle = TargetStyle;

	Trigger = new class'X2AbilityTrigger_UnitPostBeginPlay';
	Template.AbilityTriggers.AddItem(Trigger);

	PersistentStatChangeEffect = new class'X2Effect_PersistentStatChange';
	PersistentStatChangeEffect.BuildPersistentEffect(1, true, false, false);
	// PersistentStatChangeEffect.SetDisplayInfo(ePerkBuff_Passive, default.MediumPlatedHealthBonusName, default.MediumPlatedHealthBonusDesc, Template.IconImage);
	PersistentStatChangeEffect.AddPersistentStatChange(eStat_HP, default.HEAVY_ELERIUM_HEALTH_BONUS);
	PersistentStatChangeEffect.AddPersistentStatChange(eStat_ArmorChance, default.HEAVY_ELERIUM_MITIGATION_CHANCE);
	PersistentStatChangeEffect.AddPersistentStatChange(eStat_ArmorMitigation, default.HEAVY_ELERIUM_MITIGATION_AMOUNT);
	Template.AddTargetEffect(PersistentStatChangeEffect);

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;

	return Template;
}

static function X2AbilityTemplate PillarArmorAbility()
{
	local X2AbilityTemplate				Template;
	local X2AbilityTarget_Cursor		Cursor;
	local X2AbilityMultiTarget_Radius	RadiusMultiTarget;
	local X2AbilityCost_ActionPoints	ActionPointCost;
	local X2AbilityCharges				Charges;
	local X2AbilityCost_Charges			ChargeCost;
	local X2Effect_SpawnDestructible	PillarEffect;
	local X2AbilityCooldown				Cooldown;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'PillarArmor');

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTriggers.AddItem(default.PlayerInputTrigger);
	Template.TargetingMethod = class'X2TargetingMethod_Pillar';

	Cursor = new class'X2AbilityTarget_Cursor';
	Cursor.bRestrictToSquadsightRange = true;
	Template.AbilityTargetStyle = Cursor;

	RadiusMultiTarget = new class'X2AbilityMultiTarget_Radius';
	RadiusMultiTarget.fTargetRadius = 0.25; // small amount so it just grabs one tile
	Template.AbilityMultiTargetStyle = RadiusMultiTarget;

	ActionPointCost = new class'X2AbilityCost_ActionPoints';
	ActionPointCost.iNumPoints = 1;
	Template.AbilityCosts.AddItem(ActionPointCost);
	Template.AbilityCosts.AddItem(new class'X2AbilityCost_Focus');

	Charges = new class'X2AbilityCharges';
	Charges.InitialCharges = 1;
	Template.AbilityCharges = Charges;

	ChargeCost = new class'X2AbilityCost_Charges';
	ChargeCost.NumCharges = 1;
	ChargeCost.bOnlyOnHit = true;
	Template.AbilityCosts.AddItem(ChargeCost);

	Cooldown = new class'X2AbilityCooldown';
	Cooldown.iNumTurns = default.PILLAR_ARMOR_COOLDOWN;
	Template.AbilityCooldown = Cooldown;

//BEGIN AUTOGENERATED CODE: Template Overrides 'Pillar'
	Template.AbilitySourceName = 'eAbilitySource_Item';
	Template.CustomFireAnim = 'HL_Pillar';
	Template.ActivationSpeech = 'Pillar';
//END AUTOGENERATED CODE: Template Overrides 'Pillar'
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_AlwaysShow;
	Template.Hostility = eHostility_Defensive;
	Template.IconImage = "img:///UILibrary_XPACK_Common.PerkIcons.UIPerk_Pillar";
	Template.AbilityConfirmSound = "TacticalUI_ActivateAbility";
	Template.ConcealmentRule = eConceal_Never;

	Template.AbilityShooterConditions.AddItem(default.LivingShooterProperty);
	Template.AddShooterEffectExclusions();

	PillarEffect = new class'X2Effect_Pillar';
	PillarEffect.BuildPersistentEffect(1, false, true, false, eGameRule_PlayerTurnBegin);	
	PillarEffect.DestructibleArchetype = "FX_Templar_Pillar.Pillar_Destructible";
	Template.AddShooterEffect(PillarEffect);

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = Pillar_BuildVisualization;
	
	Template.SuperConcealmentLoss = class'X2AbilityTemplateManager'.default.SuperConcealmentStandardShotLoss;
	Template.ChosenActivationIncreasePerUse = class'X2AbilityTemplateManager'.default.NonAggressiveChosenActivationIncreasePerUse;

	return Template;
}

function Pillar_BuildVisualization(XComGameState VisualizeGameState)
{
	local XComGameState_Destructible DestructibleState;
	local VisualizationActionMetadata BuildTrack;

	TypicalAbility_BuildVisualization(VisualizeGameState);

	foreach VisualizeGameState.IterateByClassType(class'XComGameState_Destructible', DestructibleState)
	{
		break;
	}
	`assert(DestructibleState != none);

	BuildTrack.StateObject_NewState = DestructibleState;
	BuildTrack.StateObject_OldState = DestructibleState;
	BuildTrack.VisualizeActor = `XCOMHISTORY.GetVisualizer(DestructibleState.ObjectID);

	//class'X2Action_WaitForAbilityEffect'.static.AddToVisualizationTree(BuildTrack, VisualizeGameState.GetContext());
	class'X2Action_ShowSpawnedDestructible'.static.AddToVisualizationTree(BuildTrack, VisualizeGameState.GetContext());
}